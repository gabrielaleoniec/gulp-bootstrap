$color-white: #fff;
$color-black: #000;
$color-blue: #0096d6; // Links
$color-blue-small-text: #0074b4; //TODO: Ask David about the color

$color-dark-blue: #2473ab;
$color-dark-blue1: #0096d6;
$color-navy: #1e528e;
$color-blue-grey: #5b7983;
$color-light-grey: #f3f3f3;
$color-middle-grey: #b0b0b0; //TODO: Ask David about the color #656565;
$color-fuchsia: #d70055;

// Strips units from the given property value
// @param {String|Integer} $num Property in pixels with or without 'px'
// @return {Integer} Property without units
@function strip-unit($num) {
  @if $num > 0 {
    @return $num / ($num * 0 + 1);
  } @else {
    @return $num;
  }
}

// Pastes the given property in rems and px
// @param {String} $property Property in pixels with or without 'px'
// @param {String|Integer} $values List of properties in pixels with or without 'px'
@mixin px-fallback($property, $values...) {
  $max: length($values);
  $px-values: '';
  $rem-values: '';

  @for $i from 1 through $max {
    $value: strip-unit(nth($values, $i));
    $rem-values: #{$rem-values + $value/16};
    @if $value > 0 {
      $rem-values: #{$rem-values}rem;
    }

    @if $i < $max {
      $rem-values: #{$rem-values + ' '};
    }
  }

  @for $i from 1 through $max {
    $value: strip-unit(nth($values, $i));
    $px-values: #{$px-values + $value};
    @if $value > 0 {
      $px-values: #{$px-values}px;
    }

    @if $i < $max {
      $px-values: #{$px-values + ' '};
    }
  }

  #{$property}: $px-values;
  #{$property}: $rem-values; // sass-lint:disable-line no-duplicate-properties
}

@mixin fluid-type($properties, $min-vw, $max-vw, $min-value, $max-value) {
  @each $property in $properties {
    #{$property}: $min-value;
  }

  @media (min-width: $min-vw) {
    @each $property in $properties {
      #{$property}: calc(#{$min-value} + #{strip-unit($max-value - $min-value)} * (100vw - #{$min-vw}) / #{strip-unit($max-vw - $min-vw)});
    }
  }

  @media (min-width: $max-vw) {
    @each $property in $properties {
      #{$property}: $max-value;
    }
  }
}

@mixin alert-variant($bg, $border, $text) {
  background-color: $bg;
  border-color: $border;
  color: $text;
}

// functions to urlencode the svg string
@function str-replace($string, $search, $replace: '') {
  $index: str-index($string, $search);
  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }
  @return $string;
}

@function url-encode($string) {
  $map: (
    '%': '%25',
    '<': '%3C',
    '>': '%3E',
    ' ': '%20',
    '!': '%21',
    '*': '%2A',
    "'": '%27',
    '"': '%22',
    '(': '%28',
    ')': '%29',
    ';': '%3B',
    ':': '%3A',
    '@': '%40',
    '&': '%26',
    '=': '%3D',
    '+': '%2B',
    '$': '%24',
    ',': '%2C',
    '/': '%2F',
    '?': '%3F',
    '#': '%23',
    '[': '%5B',
    ']': '%5D'
    );
  $new: $string;
  @each $search, $replace in $map {
    $new: str-replace($new, $search, $replace);
  }
  @return $new;
}

@function inline-svg($string) {
  @return url('data:image/svg+xml;charset=US-ASCII,#{url-encode($string)}');
}

@mixin clearfix {
  &::after {
    clear: both;
    content: '';
    display: block;
  }
}

%links {
  &:hover,
  &:focus {
    color: $color-blue;
  }

  &:active {
    color: $color-fuchsia;
  }
}
